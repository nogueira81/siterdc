@model IEnumerable<rdc.Models.Cliente>
@using rdc.Models
@{
    ViewBag.Title = "Área do Cliente";
}

<h2>Área do Cliente</h2>

@{
    if (!string.IsNullOrEmpty(ViewBag.msgAreaCliSenha))
    {
        <div class="success">@ViewBag.msgAreaCliSenha</div>
    }
}

@{
	 
    WebGrid grid = new WebGrid(source: Model, canPage: true, canSort: true, rowsPerPage: 5);
    
}
@grid.GetHtml(
    tableStyle: "webgrid",
    headerStyle: "webgrid-header",
    footerStyle: "webgrid-footer",
    alternatingRowStyle: "webgrid-alternating-row",
    selectedRowStyle: "webgrid-selected-row",
    rowStyle: "webgrid-row-style",
    /*tableStyle: "webgrid",
    headerStyle: "head",
    alternatingRowStyle: "alt",
    caption: "Clientes",*/
    displayHeader: true,
    //mode: WebGridPagerModes.All, firstText:"Primeiro", previousText: "Anterior", nextText: "Próxima", lastText:"Último",
    columns: grid.Columns(
        grid.Column("NOME", ModelMetadata.FromLambdaExpression(x => x.NOME, new ViewDataDictionary<Cliente>(new Cliente())).DisplayName, style: "text-align-center"),
        grid.Column("TIPOCLIENTE",
                    ModelMetadata.FromLambdaExpression(x => x.TIPOCLIENTE, new ViewDataDictionary<Cliente>(new Cliente())).DisplayName, 
                    style: "text-align-left",
                    format: (item) =>
                        {
                            if (item.TIPOCLIENTE == "ADM")
                                return Html.Label("Administrador");
                            else
                                return Html.Label("Normal");
                        }
        ),
        grid.Column("IDCIDADE",
                    ModelMetadata.FromLambdaExpression(x => x.IDCIDADE, new ViewDataDictionary<Cliente>(new Cliente())).DisplayName, 
                    style: "text-align-left",
                    format: (item) =>
                    {
                        SelectListItem[] itemscid = new SelectList(CidadeRepositorio.ListaCidades(), "Value", "Text").ToArray();
                        SelectListItem selectedItemcid = itemscid.FirstOrDefault(i => i.Value == item.IDCIDADE.ToString())
                            ?? itemscid[0];
                        string selectedTextcidade = selectedItemcid.Text;
                        return Html.Label(selectedTextcidade);
                    }
        ),
        grid.Column("ESTADO",
                    ModelMetadata.FromLambdaExpression(x => x.ESTADO, new ViewDataDictionary<Cliente>(new Cliente())).DisplayName, 
                    style: "text-align-center",
                    format: (item) =>
                    {
                        SelectListItem[] items = new SelectList(EstadoRepositorio.ListaEstados(), "Value", "Text").ToArray();
                        SelectListItem selectedItem = items.FirstOrDefault(i => i.Value == item.ESTADO)
                            ?? items[0];
                        string selectedTextestado = selectedItem.Text;
                        return Html.Label(selectedTextestado);
                    }
        ),
        grid.Column("CPF", ModelMetadata.FromLambdaExpression(x => x.CPF, new ViewDataDictionary<Cliente>(new Cliente())).DisplayName),
        grid.Column("RG", ModelMetadata.FromLambdaExpression(x => x.RG, new ViewDataDictionary<Cliente>(new Cliente())).DisplayName),
        grid.Column("ENDERECO", ModelMetadata.FromLambdaExpression(x => x.ENDERECO, new ViewDataDictionary<Cliente>(new Cliente())).DisplayName),
        grid.Column("CEP", ModelMetadata.FromLambdaExpression(x => x.CEP, new ViewDataDictionary<Cliente>(new Cliente())).DisplayName),
        grid.Column("FONECELULAR", ModelMetadata.FromLambdaExpression(x => x.FONECELULAR, new ViewDataDictionary<Cliente>(new Cliente())).DisplayName),
        grid.Column("IDFORNECEDOR",
                    ModelMetadata.FromLambdaExpression(x => x.IDFORNECEDOR, new ViewDataDictionary<Cliente>(new Cliente())).DisplayName,
                    style: "text-align-left",
                    format: (item) =>
                    {
                        string selectedTextfornec = "Não é Fornecedor";
                        if (item.IDFORNECEDOR != null)
                        {
                            sistemardcEntities dbfor = new sistemardcEntities();
                            int idfor = item.IDFORNECEDOR;
                            var RecFor = from fornecedores in dbfor.fornecedores where fornecedores.IDFORNECEDOR == idfor select fornecedores;
                            selectedTextfornec = RecFor.First().razaosocial;
                            dbfor.Dispose();
                        }
                        return selectedTextfornec;
                    }
        ),      
        grid.Column(columnName: "IDCLIENTE", header: "Acões",
                    format: (item) =>
                    {
                        var links = Html.ActionLink("Alterar Senha", "AreaCliSenha", new { id = item.IDCLIENTE }) + "  <br />" +
                                    Html.ActionLink("Editar", "AreaCliEdit", new { id = item.IDCLIENTE }) + "  <br />" +
                                    Html.ActionLink("Detalhes", "AreaCliDet", new { id = item.IDCLIENTE });
                        return Html.Raw(links);
                    },
                    canSort: false
        )
    )
)
