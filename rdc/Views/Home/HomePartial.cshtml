@model IEnumerable<rdc.Models.reclamaco>
@using rdc.Models
<div id = "HomeRec" class="ct">
@{	 
    WebGrid grid = new WebGrid(source: Model, canPage: true, canSort: true, rowsPerPage: 6, ajaxUpdateContainerId: "HomeRec");    
}

@grid.GetHtml(
    tableStyle: "webgrid",
    headerStyle: "webgrid-header",
    footerStyle: "webgrid-footer",
    alternatingRowStyle: "webgrid-alternating-row",
    selectedRowStyle: "webgrid-selected-row",
    rowStyle: "webgrid-row-style",
    displayHeader: false,
    columns: grid.Columns(
        grid.Column("titulo",
                "Veja abaixo as últimas Reclamações",
                style: "text-align: center",
                format: (item) =>
                {
                    string datareclamacao;
                    if (item.datareclamacao == null)
                    {
                        datareclamacao = string.Format("{0:dd/MM/yyyy}", "");
                    }
                    else
                    {
                        datareclamacao = string.Format("{0:dd/MM/yyyy}", item.datareclamacao);
                    }
                    
                    string tiposolucao;
                    if (item.tiposolucao == "I")
                        tiposolucao = "<span class=\"insuccess\"><b>" + Html.Label("(Resolvido e Usuário Insatisfeito)") + "</b></span>";
                    else if (item.tiposolucao == "C")
                        tiposolucao = "<span class=\"success\"><b>" + Html.Label("(Resolvido e Usuário Satisfeito)") + "</b></span>";
                    else
                        tiposolucao = "<span class=\"error\"><b>" + Html.Label("(Sem Solução do Fornecedor)") + "</b></span>";

                    sistemardcEntities dbrec = new sistemardcEntities();
                    int idfor = item.IDFORNECEDOR;
                    var RecFor = from fornecedores in dbrec.fornecedores where fornecedores.IDFORNECEDOR == idfor select fornecedores;
                    string selectedTextfornec = RecFor.First().razaosocial;
                    dbrec.Dispose();
                    string fornecedorhome = selectedTextfornec;

                    sistemardcEntities dbcli = new sistemardcEntities();
                    int idcli = item.IDCLIENTE;
                    var RecCli = from clientes in dbcli.clientes where clientes.IDCLIENTE == idcli select clientes;
                    string selectedTextcidade = RecCli.First().LOGIN;
                    dbcli.Dispose();
                    string clientehome = selectedTextcidade;

                    SelectListItem[] items = new SelectList(EstadoRepositorio.ListaEstados(), "Value", "Text").ToArray();
                    sistemardcEntities dbest = new sistemardcEntities();
                    int idest = item.IDCLIENTE;
                    var RecEst = from clientes in dbest.clientes where clientes.IDCLIENTE == idest select clientes;
                    SelectListItem selectedItem = items.FirstOrDefault(i => i.Value == RecEst.First().ESTADO)
                        ?? items[0];
                    string selectedTextestado = selectedItem.Text;
                    dbest.Dispose();

                    return Html.Raw("<b>" +
                        Html.ActionLink(datareclamacao + " - " + (string)item.titulo, "DetalheInteracao", new { id = item.idreclamacao }, new { title = "Ver Interações dessa Reclamação" }) + "</b>" +
                        "</br><span class=\"black\"> <b>" + fornecedorhome + "</b></span>" + "&nbsp;&nbsp;" + tiposolucao);

                    /*
                    return Html.Raw("<b>"+
                        Html.ActionLink((string)item.titulo, "DetalheInteracao", new { id = item.idreclamacao }, new { title = "Ver Interações dessa Reclamação" })+"</b>"+
                        "</br></br><span class=\"black\">Comprador <b>" + clientehome + "</b>&nbsp;&nbsp;(" + selectedTextestado + ")</span>" +
                        "</br><span class=\"black\">Fornecedor <b>" + fornecedorhome + "</b></span>" +
                        "</br><span class=\"black\">Registrado em " + datareclamacao + "</span>" + "&nbsp;&nbsp;" + tiposolucao);
                    */
                }
    ))
    )
<!--
grid.GetHtml(
    tableStyle: "webgrid",
    headerStyle: "webgrid-header",
    footerStyle: "webgrid-footer",
    alternatingRowStyle: "webgrid-alternating-row",
    selectedRowStyle: "webgrid-selected-row",
    rowStyle: "webgrid-row-style",
    displayHeader: true,
    columns: grid.Columns(
        grid.Column("datareclamacao",
                    ModelMetadata.FromLambdaExpression(x => x.datareclamacao, new ViewDataDictionary<Reclamacao>(new Reclamacao())).DisplayName,
                    style: "text-align-center",
                    format: (item) =>
                        {
                            if (item.datareclamacao == null)
                            {
                                return string.Format("{0:dd/MM/yyyy}", "");
                            }
                            else
                            {
                                return string.Format("{0:dd/MM/yyyy}", item.datareclamacao);
                            }
                        }
        ),
        grid.Column("IDFORNECEDOR",
                    ModelMetadata.FromLambdaExpression(x => x.IDFORNECEDOR, new ViewDataDictionary<Reclamacao>(new Reclamacao())).DisplayName,
                    style: "text-align-left",
                    format: (item) =>
                    {
                        sistemardcEntities dbrec = new sistemardcEntities();
                        int idfor = item.IDFORNECEDOR;
                        var RecFor = from fornecedores in dbrec.fornecedores where fornecedores.IDFORNECEDOR == idfor select fornecedores;
                        string selectedTextfornec = RecFor.First().razaosocial;
                        dbrec.Dispose();
                        return selectedTextfornec;
                    }
        ),        
        grid.Column("titulo",
                    ModelMetadata.FromLambdaExpression(x => x.titulo, new ViewDataDictionary<Reclamacao>(new Reclamacao())).DisplayName,
                    style: "text-align-center",
                    format: (item) => Html.ActionLink((string)item.titulo, "DetalheInteracao", new { id = item.idreclamacao }, new { title = "Ver Interações dessa Reclamação" })
        ),
        grid.Column("tiposolucao",
                    ModelMetadata.FromLambdaExpression(x => x.tiposolucao, new ViewDataDictionary<Reclamacao>(new Reclamacao())).DisplayName,
                    style: "text-align-left",
                    format: (item) =>
                        {
                            if (item.tiposolucao == "I")
                                return Html.Raw("<div class=\"insuccess\"><b>" + Html.Label("Resolvido e Usuário Insatisfeito") + "</b></div>");
                            else if (item.tiposolucao == "C")
                                return Html.Raw("<div class=\"success\"><b>" + Html.Label("Resolvido e Usuário Satisfeito") + "</b></div>");
                            else
                                return Html.Raw("<div class=\"error\"><b>" + Html.Label("Sem Solução do Fornecedor") + "</b></div>");

                        }
        ),
        grid.Column("datasolucao",
                    ModelMetadata.FromLambdaExpression(x => x.datasolucao, new ViewDataDictionary<Reclamacao>(new Reclamacao())).DisplayName,
                    style: "text-align-center",
                    format: (item) =>
                        {
                            if (item.datasolucao == null)
                            {
                                return string.Format("{0:dd/MM/yyyy}", "");
                            }
                            else
                            {
                                return string.Format("{0:dd/MM/yyyy}", item.datasolucao);
                            }
                        }
        ),
        grid.Column("IDCLIENTE",
                    ModelMetadata.FromLambdaExpression(x => x.LOGIN, new ViewDataDictionary<Cliente>(new Cliente())).DisplayName,
                    style: "text-align-left",
                    format: (item) =>
                    {
                        sistemardcEntities dbrec = new sistemardcEntities();
                        int idcli = item.IDCLIENTE;
                        var RecCli = from clientes in dbrec.clientes where clientes.IDCLIENTE == idcli select clientes;
                        string selectedTextcidade = RecCli.First().LOGIN;
                        dbrec.Dispose();
                        return selectedTextcidade;
                    }
        ),
        grid.Column("IDCLIENTE",
                        ModelMetadata.FromLambdaExpression(x => x.ESTADO, new ViewDataDictionary<Cliente>(new Cliente())).DisplayName,
                        style: "text-align-center",
                        format: (item) =>
                        {
                            SelectListItem[] items = new SelectList(EstadoRepositorio.ListaEstados(), "Value", "Text").ToArray();
                            sistemardcEntities dbrec = new sistemardcEntities();
                            int idcli = item.IDCLIENTE;
                            var RecCli = from clientes in dbrec.clientes where clientes.IDCLIENTE == idcli select clientes;
                            SelectListItem selectedItem = items.FirstOrDefault(i => i.Value == RecCli.First().ESTADO)
                                ?? items[0];
                            string selectedTextestado = selectedItem.Text;
                            dbrec.Dispose();
                            return Html.Label(selectedTextestado);
                        }
            )
    )
)
-->
</div>